#include <stdio.h>

#define MEMORY_SIZE 1000 // Total size of the memory

// Function to display the current memory status
void displayMemory(int memory[], int size) {
    printf("Memory Status:\n");
    int start = 0;
    for (int i = 0; i < size; i++) {
        if (memory[i] == 0) {
            // Free memory block
            if (i == size - 1 || memory[i + 1] != 0) {
                printf("Free memory block %d-%d\n", start, i);
                start = i + 1;
            }
        } else {
            // Allocated memory block
            if (i == size - 1 || memory[i + 1] == 0) {
                printf("Allocated memory block %d-%d to Process %d\n", start, i, memory[i]);
                start = i + 1;
            }
        }
    }
    printf("\n");
}

int main() {
    int memory[MEMORY_SIZE] = {0}; // Initialize memory blocks (0 = free)
    int processSizes[3] = {199, 100, 100}; // Sizes of processes
    int processAlloc[3] = {0}; // Allocation status of processes (0 = not allocated)
    int processCount = 3;

    printf("Memory Status:\n");
    printf("Free memory block 0-999\n\n");

    // Step 1: Allocate memory for each process
    for (int i = 0; i < processCount; i++) {
        int size = processSizes[i];
        for (int j = 0; j < MEMORY_SIZE; j++) {
            // Check if there's enough continuous free memory for the process
            int k;
            for (k = 0; k < size && j + k < MEMORY_SIZE && memory[j + k] == 0; k++);
            if (k == size) { // Found a free block
                for (int m = 0; m < size; m++) {
                    memory[j + m] = i + 1; // Allocate memory to process
                }
                processAlloc[i] = 1; // Mark process as allocated
                break;
            }
        }
        displayMemory(memory, MEMORY_SIZE); // Display memory status after allocation
    }

    // Step 2: Deallocate memory of Process 1
    printf("Memory released by Process 1\n");
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == 1) { // Process 1 memory
            memory[i] = 0; // Free memory
        }
    }
    displayMemory(memory, MEMORY_SIZE);

    // Step 3: Allocate memory for Process 3 again
    int size = processSizes[2];
    for (int j = 0; j < MEMORY_SIZE; j++) {
        int k;
        for (k = 0; k < size && j + k < MEMORY_SIZE && memory[j + k] == 0; k++);
        if (k == size) { // Found a free block
            for (int m = 0; m < size; m++) {
                memory[j + m] = 3; // Allocate memory to process 3
            }
            processAlloc[2] = 1; // Mark process 3 as allocated
            break;
        }
    }
    displayMemory(memory, MEMORY_SIZE); // Display memory status after final allocation

    return 0;
}
