#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_ITEMS 10

// Shared buffer
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

// Semaphores
sem_t empty, full;
pthread_mutex_t mutex;

// Producer function
void* producer(void* arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        sem_wait(&empty); // Wait for space in the buffer
        pthread_mutex_lock(&mutex); // Lock the buffer for producing

        buffer[in] = i; // Produce item
        printf("Produced: %d\n", buffer[in]);
        in = (in + 1) % BUFFER_SIZE; // Update the index

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&full); // Signal that the buffer has a new item

        sleep(1); // Simulate some delay
    }
    return NULL;
}

// Consumer function
void* consumer(void* arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        sem_wait(&full); // Wait for an item in the buffer
        pthread_mutex_lock(&mutex); // Lock the buffer for consuming

        int item = buffer[out]; // Consume item
        printf("Consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE; // Update the index

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&empty); // Signal that there's space in the buffer

        sleep(1); // Simulate some delay
    }
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Buffer is initially empty
    sem_init(&full, 0, 0);              // No items in the buffer
    pthread_mutex_init(&mutex, NULL);   // Initialize mutex for buffer synchronization

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for both threads to finish
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Clean up semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
