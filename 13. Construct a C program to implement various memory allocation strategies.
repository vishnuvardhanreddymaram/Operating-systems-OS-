#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 5

typedef struct Block {
    int size;
    int allocated;
    void* address;
} Block;

Block memory[MAX_BLOCKS];

void initialize_memory() {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        memory[i].size = rand() % 100 + 50;
        memory[i].allocated = 0;
        memory[i].address = malloc(memory[i].size);
    }
}

void* first_fit(int partition_size) {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (!memory[i].allocated && memory[i].size >= partition_size) {
            memory[i].allocated = 1;
            return memory[i].address;
        }
    }
    return NULL;
}

void* best_fit(int partition_size) {
    int best_idx = -1, min_diff = 1000000;
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (!memory[i].allocated && memory[i].size >= partition_size) {
            int diff = memory[i].size - partition_size;
            if (diff < min_diff) { min_diff = diff; best_idx = i; }
        }
    }
    if (best_idx != -1) { memory[best_idx].allocated = 1; return memory[best_idx].address; }
    return NULL;
}

void* worst_fit(int partition_size) {
    int worst_idx = -1, max_diff = -1;
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (!memory[i].allocated && memory[i].size >= partition_size) {
            int diff = memory[i].size - partition_size;
            if (diff > max_diff) { max_diff = diff; worst_idx = i; }
        }
    }
    if (worst_idx != -1) { memory[worst_idx].allocated = 1; return memory[worst_idx].address; }
    return NULL;
}

int main() {
    initialize_memory();
    if (first_fit(120)) printf("First-Fit: Allocated 120 bytes\n");
    if (best_fit(60)) printf("Best-Fit: Allocated 60 bytes\n");
    if (worst_fit(130)) printf("Worst-Fit: Allocated 130 bytes\n");
    return 0;
}
