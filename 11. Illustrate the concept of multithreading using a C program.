#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

void *threadFunction(void *arg) {
    int threadNum = *((int *)arg); 
    printf("Thread %d is starting.\n", threadNum);

     sleep(1);

    printf("Thread %d is finishing.\n", threadNum);
    free(arg); 
    return NULL;
}

int main() {
    int numThreads = 5;
    pthread_t threads[numThreads]; 
    for (int i = 0; i < numThreads; i++) {
        int *arg = malloc(sizeof(int));
        if (arg == NULL) {
            perror("Memory allocation failed");
            exit(EXIT_FAILURE);
        }
        *arg = i + 1; 

        if (pthread_create(&threads[i], NULL, threadFunction, arg) != 0) {
            perror("Failed to create thread");
            exit(EXIT_FAILURE);
        }
    }

    for (int i = 0; i < numThreads; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("Failed to join thread");
            exit(EXIT_FAILURE);
        }
    }

    printf("All threads have completed execution.\n");
    return 0;
}
