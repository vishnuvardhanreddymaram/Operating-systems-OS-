#include <stdio.h>
#include <stdlib.h>
#define MAX_PROCESSES 5
struct Process {
    int id;
    int burst_time;
    int remaining_time;
};
void roundRobinScheduling(struct Process processes[], int n, int quantum) {
    int time = 0;
    int remaining_processes = n;
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
 printf("Process %d is executed for %d units. Remaining time: %d\n",processes[i].id, quantum, processes[i].remaining_time);
     } else {
     time += processes[i].remaining_time;
    
 printf("Process %d is executed for %d units. Remaining time: 0\n", 
     processes[i].id, processes[i].remaining_time);
     
     processes[i].remaining_time = 0;
     remaining_processes--;
                }
            }
        }
    }
}
int main() {
    struct Process processes[MAX_PROCESSES];
    int n, quantum;
  printf("Enter the number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);
    for (int i=0;i<n;i++) {
    printf("Enter Process ID and Burst Time for Process %d: ", i+1);
    scanf("%d %d", &processes[i].id, &processes[i].burst_time);
    processes[i].remaining_time = processes[i].burst_time;
    }
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    roundRobinScheduling(processes, n, quantum);
    return 0;
}
