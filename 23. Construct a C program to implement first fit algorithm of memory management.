#include <stdio.h>

#define MEMORY_SIZE 1000 // Total memory size

// Function to display the current memory status
void displayMemory(int memory[], int size) {
    printf("Memory Status:\n");
    int start = -1;

    for (int i = 0; i <= size; i++) {
        if (i == size || memory[i] != -1) {
            if (start != -1) {
                printf("Free memory block %d-%d\n", start, i - 1);
                start = -1;
            }
        }
        if (i < size && memory[i] == -1) {
            if (start == -1) start = i;
        }
    }

    start = -1;
    for (int i = 0; i <= size; i++) {
        if (i == size || memory[i] == 0) {
            if (start != -1) {
                printf("Allocated memory block %d-%d to Process %d\n", start, i - 1, memory[start]);
                start = -1;
            }
        }
        if (i < size && memory[i] != 0 && memory[i] != -1) {
            if (start == -1) start = i;
        }
    }
    printf("\n");
}

int main() {
    int memory[MEMORY_SIZE];
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i] = -1; // Initialize all memory as free (-1 indicates free)
    }

    // Step 1: Allocate memory for Process 1
    for (int i = 0; i < 200; i++) {
        memory[i] = 1; // Allocate block 0-199 to Process 1
    }
    displayMemory(memory, MEMORY_SIZE);

    // Step 2: Allocate memory for Process 2
    for (int i = 200; i < 500; i++) {
        memory[i] = 2; // Allocate block 200-499 to Process 2
    }
    displayMemory(memory, MEMORY_SIZE);

    // Step 3: Release memory for Process 1
    for (int i = 0; i < 200; i++) {
        memory[i] = -1; // Free block 0-199
    }
    printf("Memory released by Process 1\n");
    displayMemory(memory, MEMORY_SIZE);

    // Step 4: Allocate memory for Process 3
    for (int i = 500; i < 900; i++) {
        memory[i] = 3; // Allocate block 500-899 to Process 3
    }
    displayMemory(memory, MEMORY_SIZE);

    return 0;
}
